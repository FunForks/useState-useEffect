{"version":3,"sources":["components/Stately.jsx","App.js","index.js"],"names":["Example","renders","myState","action","id","onClick","App","useState","setMyState","useEffect","colors","color","length","document","body","style","backgroundColor","Stately","href","ReactDOM","render","getElementById"],"mappings":"8JAceA,MAZf,YAA8C,IAA5BC,EAA2B,EAA3BA,QAASC,EAAkB,EAAlBA,QAASC,EAAS,EAATA,OAClC,OACE,sBACEC,GAAG,UACHC,QAASF,EAFX,UAGI,0CACA,0CAAaF,KACb,0CAAaC,SCLjBD,EAAU,EA8CCK,MA5Cf,WACEL,GAAW,EADE,MAGiBM,mBAAS,GAH1B,mBAGNL,EAHM,KAGGM,EAHH,KAkBb,OAFAC,qBAPoC,WAClC,IAAMC,EAAS,CAAC,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,QAElDC,EAAQD,EADAT,EAAUS,EAAOE,QAE/BC,SAASC,KAAKC,MAAMC,gBAAkBL,KAMtC,sBAAKP,GAAG,MAAR,UACE,cAACa,EAAD,CACEhB,QAASA,EACTC,QAASA,EACTC,OAlBY,WAChBK,EAAWN,EAAU,MAoBnB,gEACA,qCACM,yCADN,iDACsE,qDADtE,0DAC2J,2CAD3J,uBACmM,qCADnM,OAGA,4DAA8B,+CAA9B,wBAA2E,2CAA3E,8DAA0J,0CAA1J,2CAAqN,uCAArN,+DACA,+BACE,kEAAoC,2CAApC,+BACA,oDAAsB,0CAAtB,IAAuC,2CAAvC,QAAgE,8CAAhE,gGAAoL,2CAApL,iCAAsO,yCAAtO,IAAsP,2CAAtP,2BACA,iDAAmB,+CAAnB,uCAA+E,0CAA/E,gBAA+G,2CAA/G,iBACA,sCAAQ,6CAAR,kPAA6Q,yCAA7Q,gEAEF,sCACA,8DAAgC,wDAAhC,oBAAkF,4CAAlF,2BAA+H,mBAAGgB,KAAK,4CAAR,SAAoD,wDAAnL,6CAAsQ,yCAAtQ,iJACA,+CAAiB,sDAAjB,mCAAsF,yCAAtF,wDChCNC,IAASC,OACP,cAAC,EAAD,IACAP,SAASQ,eAAe,U","file":"static/js/main.46f6b9ca.chunk.js","sourcesContent":["import React from 'react'\n\nfunction Example({renders, myState, action}) {\n  return (\n    <div\n      id='example'\n      onClick={action}>\n        <h1>Click me</h1>\n        <p>renders: {renders}</p>\n        <p>myState: {myState}</p>\n    </div>\n  )\n}\n\nexport default Example","import {useState, useEffect} from 'react'\nimport './App.css';\nimport Stately from './components/Stately'\n\nlet renders = 0\n \nfunction App() {\n  renders += 1\n\n  const [myState, setMyState] = useState(0)\n\n  const increment = () => {\n    setMyState(myState + 1)\n  }\n\n  const applyThisEffectOnEachRender = () => {\n    const colors = [\"#f9f\", \"#f99\", \"#ff9\", \"#9f9\", \"#9ff\", \"#99f\"]\n    const index = renders % colors.length\n    const color = colors[index]\n    document.body.style.backgroundColor = color\n  }\n\n  useEffect(applyThisEffectOnEachRender)\n\n  return (\n    <div id=\"App\">\n      <Stately\n        renders={renders}\n        myState={myState}\n        action={increment}\n      />\n\n      <h1>Demo of useState and useEffect</h1>\n      <p>\n        The <code>App()</code> function is called for the first time by the <code>ReactDOM.render()</code> function in index.js. The first time it is called the <code>myState</code> constant is set to <code>0</code>.\n      </p>\n      <p>Each time you click on the <code>Stately div</code> above, the value of <code>myState</code> is incremented by 1. This change causes React to call the <code>App ()</code> function again, in order to render the <code>App</code> component one more time. This will have several effects:</p>\n      <ul>\n        <li>The value of the local variable <code>renders</code> will be incremented by 1</li>\n        <li>The values of the <i>constants</i> <code>myState</code> and <code>setMyState</code> will be set inside the new function call. React will have stored the newly-changed value of <code>myState</code> internally, and will set the <i>constant</i> <code>myState</code> to this saved value.</li>\n        <li>A new function <code>increment()</code> will be created, and passed as the <code>action</code> prop to the <code>Stately</code> component.</li>\n        <li>The <code>useEffect</code> function will be triggered, which will generate a side-effect. In this example, the side-effect is a change of background-color for the body. In a real project, it could be any effect that is independent of the rendering logic, such as a <code>fetch</code> request, starting a timer, or updating the page title.</li>\n      </ul>\n      <h2>Note</h2>\n      <p>When you create an app using <code>npx create-react-app</code>,by default, the <code>index.js</code> file will render using <a href=\"https://reactjs.org/docs/strict-mode.html\"><code>&lt;React.StrictMode&gt;</code></a>. In development mode, this will call the <code>App()</code> function twice for each render, in order to activate additional checks and warnings, forhighlighting potential problems in an application.</p>\n      <p>In this demo, <code>&lt;React.StrictMode&gt;</code> has been disabled, so each the <code>App()</code> function will only be called once per render.</p>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\n\n// ReactDOM.render(\n//   <React.StrictMode>\n//     <App />\n//   </React.StrictMode>,\n//   document.getElementById('root')\n// );\n\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);"],"sourceRoot":""}